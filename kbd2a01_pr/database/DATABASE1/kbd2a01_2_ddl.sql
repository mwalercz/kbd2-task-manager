CREATE TABLE PROJECTS 
(
  PROJECT_ID NUMBER(6, 0) NOT NULL, 
  NAME VARCHAR2(64) NOT NULL
);

CREATE TABLE STATES 
(
  STATE_CODE VARCHAR2(3) NOT NULL, 
  NAME VARCHAR2(64) NOT NULL
);

CREATE TABLE STATES_IN_PROJECTS 
(
  PROJECT_ID NUMBER(6, 0) NOT NULL, 
  STATE_CODE VARCHAR2(3) NOT NULL
);

CREATE TABLE TASKS 
(
  PROJECT_ID NUMBER(6, 0) NOT NULL, 
  TASK_NO NUMBER(6, 0) NOT NULL, 
  STATE_CODE VARCHAR2(3), 
  NAME VARCHAR2(64) NOT NULL, 
  DESCRIPTION VARCHAR2(2048), 
  HOURS_SPENT NUMBER(6, 2), 
  HOURS_PREDICTED NUMBER(6, 2), 
  PERCENT_DONE NUMBER(3, 0) DEFAULT 0 NOT NULL, 
  CREATED_DATE DATE DEFAULT SYSDATE NOT NULL
);

CREATE TABLE TASKS_PREDECESSORS 
(
  PROJECT_ID NUMBER(6, 0) NOT NULL, 
  TASK_NO NUMBER(6, 0) NOT NULL, 
  PREV_TASK_NO NUMBER(6, 0) NOT NULL
);

ALTER TABLE PROJECTS
  ADD CONSTRAINT PROJ_PK PRIMARY KEY (PROJECT_ID);
  
ALTER TABLE STATES
  ADD CONSTRAINT STATE_PK PRIMARY KEY (STATE_CODE);
  
ALTER TABLE STATES_IN_PROJECTS ADD
(
  CONSTRAINT SIP_PK PRIMARY KEY (STATE_CODE, PROJECT_ID),
  CONSTRAINT SIP_STATE_FK FOREIGN KEY (STATE_CODE) REFERENCES STATES (STATE_CODE),
  CONSTRAINT SIP_PROJ_FK FOREIGN KEY (PROJECT_ID) REFERENCES PROJECTS (PROJECT_ID)
);
  
ALTER TABLE TASKS ADD
(
  CONSTRAINT TASK_PK PRIMARY KEY (PROJECT_ID, TASK_NO),
  CONSTRAINT TASK_SIP_FK FOREIGN KEY (STATE_CODE, PROJECT_ID) REFERENCES STATES_IN_PROJECTS (STATE_CODE, PROJECT_ID),
  CONSTRAINT PERCENT_DONE_CHK CHECK (PERCENT_DONE <= 100 AND PERCENT_DONE >= 0)
);
  
ALTER TABLE TASKS_PREDECESSORS ADD
(
  CONSTRAINT TP_PK PRIMARY KEY (PROJECT_ID, TASK_NO, PREV_TASK_NO),
  CONSTRAINT TP_PREV_TASK_FK FOREIGN KEY (PROJECT_ID, PREV_TASK_NO) REFERENCES TASKS (PROJECT_ID, TASK_NO),
  CONSTRAINT TP_TASK_FK FOREIGN KEY (PROJECT_ID, TASK_NO) REFERENCES TASKS (PROJECT_ID, TASK_NO),
  CONSTRAINT TASK_DIFFERENT_CHK CHECK  (PREV_TASK_NO != TASK_NO)
);

CREATE INDEX IDX_SIP_PROJ_FK ON STATES_IN_PROJECTS (PROJECT_ID ASC);
CREATE INDEX IDX_TASK_SIP_FK ON TASKS (STATE_CODE ASC, PROJECT_ID ASC);
CREATE INDEX IDX_TP_PREV_TASK_FK ON TASKS_PREDECESSORS (PROJECT_ID ASC, PREV_TASK_NO ASC);

COMMENT ON TABLE PROJECTS IS 'Represents a project that contains tasks.';
COMMENT ON TABLE STATES IS 'Represents a state that a task can be in, like In progress, New or Done.';
COMMENT ON TABLE STATES_IN_PROJECTS IS 'Represents a state that is available and can be used in specified project.';
COMMENT ON TABLE TASKS IS 'Represents a task that is contained in project.';
COMMENT ON TABLE TASKS_PREDECESSORS IS 'A rule that describes transition between one project to another. Represents a situation in which one task has to be finished before the other one can be started.';
COMMENT ON COLUMN PROJECTS.PROJECT_ID IS 'Id of the project';
COMMENT ON COLUMN PROJECTS.NAME IS 'Display name of the project';
COMMENT ON COLUMN STATES.STATE_CODE IS 'Code of the state';
COMMENT ON COLUMN STATES.NAME IS 'Display name of the state';
COMMENT ON COLUMN STATES_IN_PROJECTS.PROJECT_ID IS 'Id of the associated project.';
COMMENT ON COLUMN STATES_IN_PROJECTS.STATE_CODE IS 'Id of the associated state.';
COMMENT ON COLUMN TASKS.PROJECT_ID IS 'Id of the associated project.';
COMMENT ON COLUMN TASKS.TASK_NO IS 'Number of task that is unique for given project.';
COMMENT ON COLUMN TASKS.STATE_CODE IS 'Id of the associated state in which task currently is.';
COMMENT ON COLUMN TASKS.NAME IS 'Display name of the task.';
COMMENT ON COLUMN TASKS.DESCRIPTION IS 'Long description of the task.';
COMMENT ON COLUMN TASKS.HOURS_SPENT IS 'Number of hours spent working on the task.';
COMMENT ON COLUMN TASKS.HOURS_PREDICTED IS 'Number of hours that probably will be spent working on this task.';
COMMENT ON COLUMN TASKS.PERCENT_DONE IS 'Percentage of completeness of this task.';
COMMENT ON COLUMN TASKS.CREATED_DATE IS 'Date on which this task was created.';
COMMENT ON COLUMN TASKS_PREDECESSORS.PROJECT_ID IS 'Id of the project to which this rule applies.';
COMMENT ON COLUMN TASKS_PREDECESSORS.TASK_NO IS 'Id of the associated next task''s number.';
COMMENT ON COLUMN TASKS_PREDECESSORS.PREV_TASK_NO IS 'Id of the associated previous task''s number.';

CREATE SEQUENCE PROJECTS_SEQUENCE;

CREATE OR REPLACE TRIGGER PROJECTS_BIR_TRG BEFORE INSERT ON PROJECTS FOR EACH ROW WHEN (NEW.PROJECT_ID IS NULL)
/* Trigger that assigns unique PROJECT_ID value from sequence to newly inserted PROJECT */
BEGIN
  SELECT PROJECTS_SEQUENCE.NEXTVAL INTO :NEW.PROJECT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TASKS_BIR_TRG BEFORE INSERT ON TASKS FOR EACH ROW WHEN (NEW.TASK_NO IS NULL)
/* Trigger that assigns TASK_NO to newly inserted TASK. TASK_NO is unique in scope of PROJECT that TASK is assigned to. */
BEGIN
  SELECT MAX(TASK_NO) + 1 INTO :NEW.TASK_NO FROM TASKS WHERE PROJECT_ID = :NEW.PROJECT_ID;
  IF :NEW.TASK_NO IS NULL THEN
      SELECT 1 INTO :NEW.TASK_NO FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER TASKS_BUR_TRG BEFORE UPDATE ON TASKS FOR EACH ROW WHEN (NEW.CREATED_DATE <> OLD.CREATED_DATE)
/* Trigger that forbids changing CREATED_DATE on TASK and raises application error if it occurs. */
BEGIN
  RAISE_APPLICATION_ERROR(-20000, 'Can not modify CREATED_DATE of TASKS');
END;
/

CREATE OR REPLACE TRIGGER TASKS_BDS_TRG BEFORE DELETE ON TASKS
/* Trigger that forbis deleting TASK and raises application error if it occurs. */
BEGIN
  RAISE_APPLICATION_ERROR(-20000, 'Can not delete from TASKS');
END;
/

CREATE VIEW TASKS_DETAILS_V AS 
  SELECT PROJECT_ID, P.NAME PROJECT_NAME, T.TASK_NO, STATE_CODE, S.NAME STATE_NAME, T.DESCRIPTION, T.HOURS_SPENT, T.HOURS_PREDICTED, T.PERCENT_DONE, T.CREATED_DATE
  FROM TASKS T
  JOIN STATES S USING (STATE_CODE)
  JOIN PROJECTS P USING (PROJECT_ID);
  
CREATE VIEW PROJECTS_TASKS_V AS
  SELECT PROJECT_ID, P.NAME, COUNT(*) NUMBER_OF_TASKS, SUM(T.HOURS_SPENT) SUM_HOURS_SPENT, SUM(T.HOURS_PREDICTED) SUM_HOURS_PREDICTED, AVG(T.PERCENT_DONE) PERCENT_DONE
  FROM PROJECTS P
  LEFT JOIN TASKS T USING (PROJECT_ID)
  GROUP BY PROJECT_ID, P.NAME;
